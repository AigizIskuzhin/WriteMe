@model Website.ViewModels.AuthorizationViewModel
@{
    Layout = null;
}
<link rel="stylesheet" href="~/Resources/css/auth.css" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Nunito:wght@600&display=swap"> 

<div class="center-screen auth">
    <h3>Авторизация</h3>
    <form class="auth-form" asp-anti-forgery="true">
        <input type="hidden" asp-for="MailAddress" />
        <div class="auth-row">
            <input id="Password" autocomplete="off" onkeyup="IsInputEmpty()" class="auth-input" placeholder="Пароль" type="text" asp-for="Password" value=""/>
            <div asp-validation-summary="All"></div>
            @*<div asp-validation-summary="ModelOnly" class="auth-validation-list rightOf">
                    <ul>
                        <li class="auth-error">Неверная почта</li>
                    </ul>
                </div>*@
        </div>
        <div class="auth-row">
            <input id="sumbit" class="auth-btn pointer" disabled onmousemove="IsDisabled()" onmouseleave="HideError()" type="submit" value="Войти"/>
            <span id="submit-error" class="auth-error rightOf">Введите пароль</span>
        </div>
    </form>
</div>
<script>
    let inputHasError = false;
    let inputValidationList = document.getElementsByClassName('validation-summary-errors')[0];
    document.addEventListener("DOMContentLoaded", function (event) {
        if (inputValidationList != undefined)
            if (inputValidationList.hasChildNodes)
                if (inputValidationList.children[0].hasChildNodes) {
                    inputHasError = true;
                    let inputError = inputValidationList.children[0].children[0];
                    inputError.className = "auth-error";
                    setTimeout(function () {
                        AddShowClass(inputError);
                    }, 500);
                }
    });

    let submitBtn = document.getElementById('sumbit');
    function IsInputEmpty() {
        let input = document.getElementById('Password');

        if (input.value == "") {
            submitBtn.setAttribute("disabled", "");
        }
        else {
            HideError();
            submitBtn.removeAttribute("disabled");
        }
        if (inputHasError) {
            let inputError = inputValidationList.children[0].children[0];
            RemoveVisibleClass(inputError);
            inputHasError = false;
        }
    }
    IsInputEmpty();
    function IsDisabled() {
        if (!submitBtn.hasAttribute("disabled")) {
            HideError();
            return;
        }
        ShowError();
    }
    function ShowError() {
        if (!submitBtn.hasAttribute("disabled")) {
            HideError();
            return;
        }
        setTimeout(function () {
            let submitError = document.getElementById('submit-error');
            AddShowClass(submitError);
        }, 150);
    }
    function HideError() {
        setTimeout(function () {
            let submitError = document.getElementById('submit-error');
            let className = submitError.classList[0];
            let visibleClassName = className + "-visible";
            if (submitError.classList.contains(visibleClassName))
                submitError.classList.remove(visibleClassName);
        }, 150);
    }
    function AddShowClass(element) {
        let className = element.classList[0];
        let visibleClassName = className + "-visible";
        if (!element.classList.contains(visibleClassName))
            element.classList.add(visibleClassName);
    }
    function RemoveVisibleClass(element) {
        let className = element.classList[0];
        let visibleClassName = className + "-visible";
        if (element.classList.contains(visibleClassName))
            element.classList.remove(visibleClassName);
    }
</script>